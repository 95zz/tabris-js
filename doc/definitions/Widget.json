{
  "type": "Widget",
  "title": "Common Widget Methods, Properties and Events",
  "description": "API supported by all widgets except Action.",
  "methods": {
    "set": [
      {
        "parameters": ["property", "value"],
        "description": "Sets the given property.",
        "returns": "Widget"
      },
      {
        "parameters": ["properties"],
        "description": "Sets the all given properties-value pairs.",
        "returns": "Widget"
      }
    ],
    "get": [
      {
        "parameters": ["property"],
        "returns": "value",
        "description": "Gets the current value of the given *property*."
      }
    ],
    "children": [
      {
        "parameters": [],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all children of this widget."
      },
      {
        "parameters": ["selector"],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all children of this widget that match the selector."
      }
    ],
    "find": [
      {
        "parameters": [],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all descendants of this widget."
      },
      {
        "parameters": ["selector"],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all descendants of this widget that match the selector."
      }
    ],
    "parent": [
      {
        "parameters": [],
        "returns": "Widget",
        "description": "Returns the parent of this widget."
      }
    ],
    "appendTo": [
      {
        "parameters": ["Composite"],
        "returns": "Widget",
        "description": "Appends this widget to the given parent. The parent widget must support children (like Page, Composite)."
      }
    ],
    "on": [
      {
        "parameters": ["event", "listener"],
        "returns": "Widget",
        "description": "Adds the *listener* to the list of functions to be notified when *event* is fired. In the listener function, `this` will point to the widget itself."
      },
      {
        "parameters": ["event", "listener", "context"],
        "returns": "Widget",
        "description": "Adds a *listener* to the list of functions to be notified when *event* is fired. In the listener function, `this` will point to the given *context* object."
      }
    ],
    "off": [
      {
        "parameters": [],
        "returns": "Widget",
        "description": "Removes all listeners for all events from this widget."
      },
      {
        "parameters": ["event"],
        "returns": "Widget",
        "description": "Removes all listeners for *event* from this widget."
      },
      {
        "parameters": ["event", "listener"],
        "returns": "Widget",
        "description": "Removes all occurrences of *listener* that are bound to *event* from this widget, regardless of their *context* parameter."
      },
      {
        "parameters": ["event", "listener", "context"],
        "returns": "Widget",
        "description": "Removes all occurrences of *listener* that are bound to *event* and *context* from this widget."
      }
    ],
    "once": [
      {
        "parameters": ["event", "listener"],
        "returns": "Widget",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event."
      },
      {
        "parameters": ["event", "listener", "context"],
        "returns": "Widget",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event."
      }
    ],
    "animate": [
      {
        "parameters": ["properties", "options"],
        "description": "Starts an animation that transforms the given properties from their current values to the given ones. Supported properties are *transform* and *opacity*. Supported options are:\n\n- *delay* - time until the animation starts in ms, defaults to `0`\n- *duration* - in ms,\n- *easing* - one of `linear`, `ease-in`, `ease-out`, `ease-in-out`\n- *repeat* - number of times to repeat the animation, defaults to `0`\n- *reverse* - `true` to alternate the direction of the animation on every repeat.\n- *name* - no effect, but will be given in animation events"
      }
    ],
    "dispose": [
      {
        "parameters": [""],
        "description": "Removes this widget from its parent and destroys it. Also disposes of all its children. Triggers a `remove` event on the parent and a `dispose` event on itself. The widget can no longer be used."
      }
    ],
    "isDisposed": [
      {
        "parameters": [""],
        "returns": "boolean",
        "description": "Returns `true` if the widget has been disposed, otherwise `false`."
      }
    ]
  },
  "properties": {
    "id": {
      "type": "string",
      "description": "A string to identify the widget by using selectors. Id's are optional. It is strongly recommended that they are unique within a page."
    },
    "enabled": {
      "type": "boolean?true",
      "description": "Whether the widget can be operated."
    },
    "visible": {
      "type": "boolean?true",
      "description": "Whether the widget is visible."
    },
    "layoutData": {
      "type": "LayoutData",
      "description": "Specifies how the widget should be arranged in a layout. See [Layout](layout.md)."
    },
    "font": {
      "type": "Font",
      "description": "The font used for the widget."
    },
    "backgroundImage": {
      "type": "Image",
      "description": "An image to be displayed on the widget's background. If the image is smaller than the widget, it will be tiled."
    },
    "bounds": {
      "type": "Bounds",
      "description": "The actual location and size of the widget, relative to its parent. This property is read-only."
    },
    "background": {
      "type": "Color",
      "description": "Background color of the widget."
    },
    "textColor": {
      "type": "Color",
      "description": "Text color of the widget."
    },
    "opacity": {
      "type": "number:0..1?1",
      "description": "Opacity of the entire widget. Can be used for fade animations."
    },
    "transform": {
      "type": "Transformation",
      "description": "Modifications to the widget's shape, size, or position. Can be used for animations. **Note:** In Android the *transform* property does not affect the *bounds* property, while it does so in iOS."
    },
    "highlightOnTouch": {
      "type": "boolean?false",
      "description": "Whether the entire widget should be highlighted while touched."
    }
  },
  "events": {
    "change:{property}": {
      "parameters": ["widget", "value", "options"],
      "description": "Fired when the given property has changed. If the change was triggered programmatically the *options* object is the one given when `set` was called. Change events for specific properties will only be documented separately if they may be changed without calling `set`. "
    },
    "tap": {
      "parameters": ["widget", "[gesture](../touch.md#gesture_object)"],
      "description": "Fired once when a finger briefly touched the widget."
    },
    "longpress": {
      "parameters": ["widget", "[gesture](../touch.md#gesture_object)"],
      "description": "Fired after pressing a widget for a specific amount of time (about a second), and again on lifting the finger."
    },
    "pan": {
      "parameters": ["widget", "[gesture](../touch.md#gesture_object)"],
      "description": "Fired continuously after a finger touching the widget moved for a certain distance."
    },
    "pan:{direction}": {
      "parameters": ["widget", "[gesture](../touch.md#gesture_object)"],
      "description": "Fired when a finger starts moving in the given direction. Values for {direction} are: `left`, `right`, `up`, `down`."
    },
    "swipe:{direction}": {
      "parameters": ["widget", "[gesture](../touch.md#gesture_object)"],
      "description": "Fired when a finger moves quickly in the given direction. Values for {direction} are: `left`, `right`, `up`, `down`."
    },
    "touchstart": {
      "parameters": ["widget", "[touchEvent](../touch.md#touch_event_object)"],
      "description": "Fired when a widget is touched. See [Touch Events](touch.md)."
    },
    "touchmove": {
      "parameters": ["widget", "[touchEvent](../touch.md#touch_event_object)"],
      "description": "Fired repeatedly while swiping across the screen."
    },
    "touchend": {
      "parameters": ["widget", "[touchEvent](../touch.md#touch_event_object)"],
      "description": "Fired when a touch ends on the same widget than it started on."
    },
    "touchcancel": {
      "parameters": ["widget", "[touchEvent](../touch.md#touch_event_object)"],
      "description": "Fired instead of touchend when the touch ends on another widget than it started on."
    },
    "resize": {
      "parameters": ["widget", "[bounds](#bounds)", "options"],
      "description": "Fired when the widget's size or position has changed. The *options* object is empty."
    },
    "animationstart": {
      "parameters": ["widget", "options"],
      "decription": "Fired when an animation starts playing. The *options* object is the one given [when `animate` was called](../animations.md)."
    },
    "animationend": {
      "parameters": ["widget", "options"],
      "description:": "Fired when an animation has completed. The *options* object is the one given [when `animate` was called](../animations.md)."
    },
    "dispose": {
      "parameters": ["widget", "options"],
      "description": "Fired when the widget is about to be disposed. At this point the widget and its children are still accessible. The *options* object is empty."
    }
  },
  "links": [
    {
      "title": "Understanding layouts in Tabris.js",
      "path": "layouts"
    },
    {
      "title": "Understanding gesture events in Tabris.js",
      "path": "touch"
    }
  ]
}
